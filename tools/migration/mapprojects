#!/usr/bin/python
# -*- coding: utf-8 -*-

import json
import fileinput
from optparse import OptionParser
import os
import MySQLdb
import sys


class Parameters(object):

    def __init__(self):
        self.dbuser = ''
        self.dbpwd = ''
        self.mapprojectsfile = ''
        self.init_from_input()

    @staticmethod
    def parse_input():
        usage = \
            'usage: %prog [options] <dbuser> <dbpwd> <mapprojectsfile>'
        parser = OptionParser(usage)
        parser.add_option('-u', '--dbuser', dest='dbuser',
                          help='db user')
        parser.add_option('-p', '--dbpwd', dest='dbpwd',
                          help='db password')
        parser.add_option('-m', '--mapprojectsfile',
                          dest='mapprojectsfile',
                          help='the path of mapping projects file')

        (options, args) = parser.parse_args()
        return (options.dbuser, options.dbpwd, options.mapprojectsfile)

    def init_from_input(self):
        (self.dbuser, self.dbpwd, self.mapprojectsfile) = \
            Parameters.parse_input()


class AccessLog:

    def __init__(self, project_id, log_id):
        self.project_id = project_id
        self.log_id = ''


class Repository:

    def __init__(self, project_id, repository_id):
        self.project_id = project_id
        self.repository_id = ''


class Project:

    def __init__(
        self,
        project_id,
        name,
        index_id,
        ):
        self.project_id = project_id
        self.project_name = name
        self.index_id = index_id


class HarborUtil:

    def __init__(self, dbuser, dbpwd):
        self.serverName = 'localhost'
        self.user = dbuser
        self.password = dbpwd
        self.port = '3306'
        self.subDB = 'registry'
        self.db = None
        self.cursor = None

    def connect(self):
        try:
            self.db = MySQLdb.connect(host=self.serverName,
                    user=self.user, passwd=self.password, db=self.subDB)
            self.db.autocommit(False)
            self.cursor = self.db.cursor()
        except Exception, e:
            raise Exception(e)

    def close(self):
        try:
            self.db.commit()
            self.cursor.close()
            self.db.close()
        except Exception, e:
            print str(e)

    def enable_foreign_key_check(self):
        try:
            self.cursor.execute('SET FOREIGN_KEY_CHECKS=1')
        except Exception, e:
            print str(e)

    def disable_foreign_key_check(self):
        try:
            self.cursor.execute('SET FOREIGN_KEY_CHECKS=0')
        except Exception, e:
            print str(e)

    def update_access_log_table(self, projects):
        for project in projects:
            access_logs = []
            try:
                query_log_id = \
                    'SELECT * from registry.access_log where project_id=%s' \
                    % project.project_id
                self.cursor.execute(query_log_id)
                self.cursor.fetchall()
                for result in self.cursor:
                    access_logs.append(result[0])
            except Exception, e:
                raise Exception(e)

            for item in access_logs:
                try:
                    query_update_project_id = \
                        'UPDATE registry.access_log SET project_id=%s where log_id=%s' \
                        % (project.index_id, item)
                    self.cursor.execute(query_update_project_id)
                except Exception, e:
                    raise Exception(e)

    def update_repository_table(self, projects):
        for project in projects:
            repositories = []
            try:
                query_repository_id = \
                    'SELECT * from registry.repository where project_id=%s' \
                    % project.project_id
                self.cursor.execute(query_repository_id)
                self.cursor.fetchall()
                for result in self.cursor:
                    repositories.append(result[0])
            except Exception, e:
                raise Exception(e)

            for item in repositories:
                try:
                    query_update_project_id = \
                        'UPDATE registry.repository SET project_id=%s where repository_id=%s' \
                        % (project.index_id, item)
                    self.cursor.execute(query_update_project_id)
                except Exception, e:
                    raise Exception(e)

    def update_replication_policy_table(self, projects):
        for project in projects:
            replication_policies = []
            try:
                query_replication_id = \
                    'SELECT * from registry.replication_policy where project_id=%s' \
                    % project.project_id
                self.cursor.execute(query_replication_id)
                self.cursor.fetchall()
                for result in self.cursor:
                    replication_policies.append(result[0])
            except Exception, e:
                raise Exception(e)

            for item in replication_policies:
                try:
                    query_update_project_id = \
                        'UPDATE registry.replication_policy SET project_id=%s where id=%s' \
                        % (project.index_id, item)
                    self.cursor.execute(query_update_project_id)
                except Exception, e:
                    raise Exception(e)


def main():
    commandline_input = Parameters()
    harbor = HarborUtil(commandline_input.dbuser,
                        commandline_input.dbpwd)

    try:
        harbor.connect()
        harbor.disable_foreign_key_check()

        with open(commandline_input.mapprojectsfile, 'r') as \
            project_mapping_file:
            project_mapping_data = json.load(project_mapping_file)

        projects_mapping_list = []
        for item in project_mapping_data['map_projects']:
            projects_mapping_list.append(Project(item['project_id'],
                    item['project_name'], item['index_id']))

        harbor.update_access_log_table(projects_mapping_list)
        harbor.update_repository_table(projects_mapping_list)
        harbor.update_replication_policy_table(projects_mapping_list)
    except Exception, e:

        print e
        sys.exit(1)
    finally:
        harbor.enable_foreign_key_check()
        harbor.close()


if __name__ == '__main__':
    main()

			