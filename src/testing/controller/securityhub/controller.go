// Code generated by mockery v2.22.1. DO NOT EDIT.

package securityhub

import (
	context "context"

	model "github.com/goharbor/harbor/src/pkg/securityhub/model"
	mock "github.com/stretchr/testify/mock"

	q "github.com/goharbor/harbor/src/lib/q"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// CountVuls provides a mock function with given fields: ctx, scannerUUID, projectID, tuneCount, query
func (_m *Controller) CountVuls(ctx context.Context, scannerUUID string, projectID int64, tuneCount bool, query *q.Query) (int64, error) {
	ret := _m.Called(ctx, scannerUUID, projectID, tuneCount, query)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, bool, *q.Query) (int64, error)); ok {
		return rf(ctx, scannerUUID, projectID, tuneCount, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, bool, *q.Query) int64); ok {
		r0 = rf(ctx, scannerUUID, projectID, tuneCount, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, bool, *q.Query) error); ok {
		r1 = rf(ctx, scannerUUID, projectID, tuneCount, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DefaultScannerUUID provides a mock function with given fields: ctx
func (_m *Controller) DefaultScannerUUID(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVuls provides a mock function with given fields: ctx, scannerUUID, projectID, query
func (_m *Controller) ListVuls(ctx context.Context, scannerUUID string, projectID int64, query *q.Query) ([]*model.VulnerabilityItem, error) {
	ret := _m.Called(ctx, scannerUUID, projectID, query)

	var r0 []*model.VulnerabilityItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, *q.Query) ([]*model.VulnerabilityItem, error)); ok {
		return rf(ctx, scannerUUID, projectID, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, *q.Query) []*model.VulnerabilityItem); ok {
		r0 = rf(ctx, scannerUUID, projectID, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.VulnerabilityItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, *q.Query) error); ok {
		r1 = rf(ctx, scannerUUID, projectID, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecuritySummary provides a mock function with given fields: ctx, projectID, withCVE, withArtifact
func (_m *Controller) SecuritySummary(ctx context.Context, projectID int64, withCVE bool, withArtifact bool) (*model.Summary, error) {
	ret := _m.Called(ctx, projectID, withCVE, withArtifact)

	var r0 *model.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool, bool) (*model.Summary, error)); ok {
		return rf(ctx, projectID, withCVE, withArtifact)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool, bool) *model.Summary); ok {
		r0 = rf(ctx, projectID, withCVE, withArtifact)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, bool, bool) error); ok {
		r1 = rf(ctx, projectID, withCVE, withArtifact)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewController interface {
	mock.TestingT
	Cleanup(func())
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewController(t mockConstructorTestingTNewController) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
